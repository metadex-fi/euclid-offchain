Two cases: optimizing for best price, or for minimum number of transactions. This is mainly from a realistic 
user pov.


If optimizing for minimum number of transactions:

- first thought was: simply max out the first swap, then apply it, then do the next one
- however, upon closer inspection this will fail at least in the the case where that delta-buying-limit applies, 
  as we're approaching infinite delta-selling when approaching that limit
- we could of course consider that we're in a discrete environment, so will not reach that limit - implication is 
  nevertheless that we might need to do the 2-dimensional optimization problem of trade size & number of txs


User flow:
- Select assets to swap 
- enter buying or selling amount
- get resulting other amount/effective price/slippage, and number of transactions
- maybe decide those are too many transactions


Further:
- even if the user doesn't really care about number of transactions, it might still be silly if there's first a super 
  small transaction
- we are also not taking into account tx fees
- tx-chaining in the current state of affairs might suck hard, because not only does one have to enter password multiple
  times, the longer that takes the higher the chance of the whole chain failing
- we don't necessarily need to rely on tx-chaining, we could try to add that feature to the contract
- we could also rework the core logic

Reworking the core logic:
- we want to achieve a "chunky" amm situation to disincentivise whales from clogging up all the state machines
- another advantage of going "chunky" is that we only need a constant sum instead of constant weighted product equation,
  the latter of which will require potentially (likely, based on experience) too large exponentiations
- of course we are still using exponentiations for calculation of the declared spot prices, but could consider not doing so
- if we wanted to simulate subsequent swap within one tx, we could probably just keep numerator/divisor of the spot price, and 
  multiply it again for each successive swap 
  - given that our limit on multiplications for the exponentiations is in total ~11, that sounds bad
  - sidenote on anchor-prices: We want them to be set to the closest spots to the amm initially as well instead of the lowest (TODO)
  - this means we might be able to do away with exponentiations:


Exponentiation-free approach:
  1. have anchor-prices that are closest to current amm
  2. when swapping, calculate capacity for current amm & anchors (spots)
  3. for each asset, consider whether the remaining trade size exceeds that 
    a. if it does, subtract that capacity from the remaining trade size, and use that capacity below
    b. otherwise simply use the remaining trade size 
  4. use those deltas and spots to verify the sub-trade 
  5. multiply numerator/denominator of each spot with jumpSize/jumpSize + 1 (as suited, respectively)
  6. continue until done

=> edge cases:
- when the delta-capacity of an asset is zero
  -> base solution: do another step (simply applying it won't change anything)
- when the best spot price is further away from the amm than the anchor due to i.e. rounding
  -> base solution: simply call it tough luck

=> issue: the capped deltas won't necessarily result in a correct trade!

Fix 1: <-- better one
- provide a list of delta-pairs to step through in the redeemer, for the non-final swaps


Why might this be better or worse than the current version?

worse: 
- less efficient use of multiplications -> less maximum capacity  
  -> can be tackled by i.e. 
    - a-priori-jumpsize-multiplier


better: 
- less choices/ambiguity -> less need for optimization in the frontend, and less chance to overlook something
- no need for tx-chaining -> better user-experience, less chance to fail due to chain limitations



Is there a good reason why I hadn't thought of this before?
- previously discarded because wanted to avoid further complications by simulating multiple contract executions
- thought we could rely on tx-chaining 
- postponed until later 
- was using linear instead of multiplicative price steps, which I'm not sure how this is relevant here 



recap/more details:

  1. have anchor-prices that are closest to current amm
  2. when swapping, instead of exponents provide list of pairs of subswap-deltas
  3. get current balances from current dirac-utxo
  4. get weights from param-utxo
  5. calculate current amm-prices: balances * weights
  6. get current anchor-prices from current dirac-datum
    a. 
  4. step through list of deltas. For each:
    a. calculate a0-deltas: delta * spot
    b. confirm they are adhering to the value-equation
    c. update balances by adding deltas
    d. update amm-prices by adding deltas * weights, or multiplying balances by weights
    e. confirm they are within spot-bounds
    f. 




  3. for each asset, consider whether the remaining trade size exceeds that 
    a. if it does, subtract that capacity from the remaining trade size, and use that capacity below
    b. otherwise simply use the remaining trade size 
  4. use those deltas and spots to verify the sub-trade 
  5. multiply numerator/denominator of each spot with jumpSize/jumpSize + 1 (as suited, respectively)
  6. continue until done











Fix 2:
- if capping one or both, calculate the equivalent in the other asset and use smaller pair

----------------------------------------------------------------------------------------------------------------


Further: If we have only one jumpSize per pool, many things would be simpler



----------------------------------------------------------------------------------------------------------------


Sketch of very different approach:
- instead of having a jumpSize per token, have a swapSize
- when we swap less than that for each token, we calculate the spot prices as if we'd be using that swapSize, basically rounding up
- that would remove the staggering and be increasingly worse as we approach the ends of the spectrum. Also probably not multiplicative
- when we swap more than that, we simply simulate do the previous multiple times in succession